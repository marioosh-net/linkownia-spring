<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	 http://www.springframework.org/schema/mvc
	 http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
     http://www.springframework.org/schema/security
     http://www.springframework.org/schema/security/spring-security-3.0.3.xsd	      
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- Auto-detecting components -->
	<!-- dla wykrytych komponentow tworzone sa beany -->
	<!-- bedziemy korzystac z adnotacji @Component, @Controller, @Repository, @Service ... -->
	<context:component-scan base-package="net.marioosh.spring.springonly" />

	<!-- view resolver -->
	<!-- dziala: np. simpleView -> /WEB-INF/pages/simpleView.jsp -->
	<!-- jesli nie zdefiniujemy zadnego domyslny -> simply forwards to a URL matching the name of the view specified -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- data source -->
	<!-- springonly / marioosh.net 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://marioosh.net:3306/springonly" />
		<property name="username" value="springonly" />
		<property name="password" value="springonly" />
	</bean>
	-->
	<!-- linkownia_small / marioosh.net 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://marioosh.net:3306/linkownia_small" />
		<property name="username" value="linkownia" />
		<property name="password" value="linkownia" />		
	</bean>
	-->
	<!-- local -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/springonly?charSet=UTF-8" />
		<property name="username" value="springonly" />
		<property name="password" value="springonly" />
	</bean>

	<!-- JSR-303 Validator / Bean Validator -->
	<!-- A JSR-303 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically -->
	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/> -->
	<!-- -->
	<!-- wykryj automatycznie JSR-303 Provider'a np. hibernate validator'a i utworz validatora o nazwie "validator" -->
	<mvc:annotation-driven />

	<!-- message source -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>

	<!-- Spring Security -->
	<security:http auto-config="true">
		<security:form-login />
		<security:logout logout-success-url="/index.html" logout-url="/logout.html" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="admin" authorities="ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<!-- simple controller -->
	<mvc:view-controller path="/test.html" view-name="test"/>
	<mvc:view-controller path="/test2.html" view-name="test2"/>

</beans>